cat << 'EOF' > Jenkinsfile
pipeline {
    agent any

    environment {
        IMAGE_NAME = "spring-boot-app"
    }

    stages {
        stage('Check tools') {
            steps {
                echo 'üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ docker —ñ kubectl'
                sh 'echo "DOCKER:"'
                sh 'which docker || echo "‚ùå docker not found"'
                sh 'docker --version || echo "‚ùå docker not working"'

                sh 'echo "KUBECTL:"'
                sh 'which kubectl || echo "‚ùå kubectl not found"'
                sh 'kubectl version --client || echo "‚ùå kubectl not working"'
            }
        }

        stage('Checkout') {
            steps {
                echo 'üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–¥—É –∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é'
                git url: 'https://github.com/dmitryhtsnk/rbac.git', branch: 'main'
            }
        }

        stage('Build') {
            steps {
                echo '‚öôÔ∏è –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –∫–æ–¥—É'
                sh './mvnw clean compile'
            }
        }

        stage('Test') {
            steps {
                echo 'üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤'
                sh './mvnw test'
            }
        }

        stage('Package') {
            steps {
                echo 'üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è JAR'
                sh './mvnw package -DskipTests'
            }
        }

        stage('Archive Artifacts') {
            steps {
                echo 'üóÉ –ê—Ä—Ö—ñ–≤–∞—Ü—ñ—è JAR'
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "üê≥ –ó–±—ñ—Ä–∫–∞ Docker-–æ–±—Ä–∞–∑—É –∑ —ñ–º º—è–º ${IMAGE_NAME}"
                sh 'docker build -t ${IMAGE_NAME} .'
            }
        }

        stage('Load Image to Minikube') {
            steps {
                echo "üöö –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Docker-–æ–±—Ä–∞–∑—É –¥–æ Minikube"
                sh 'minikube image load ${IMAGE_NAME}'
            }
        }

        stage('Deploy to Minikube') {
            steps {
                echo "üöÄ –î–µ–ø–ª–æ–π –≤ Minikube"
                sh 'kubectl apply -f k8s/'
            }
        }
    }

    post {
        success {
            echo '‚úÖ –ó–±—ñ—Ä–∫–∞ —Ç–∞ –¥–µ–ø–ª–æ–π —É—Å–ø—ñ—à–Ω—ñ!'
        }
        failure {
            echo '‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è pipeline.'
        }
    }
}
EOF


